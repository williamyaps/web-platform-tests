{
  "name": "Wlmyaps-web-platform-tests",
  "tagline": "Test Suites for Web Platform specificationsâ€”including WHATWG, W3C and others",
  "body": "The Web Platform Tests Project [![IRC chat](https://goo.gl/6nCIks)](http://irc.w3.org/?channels=testing)\r\n==============================\r\n\r\nThe Web Platform Tests Project is a W3C-coordinated attempt to build a\r\ncross-browser testsuite for the Web-platform stack.  However, for mainly\r\nhistoric reasons, the CSS WG testsuite is in a separate repository,\r\n[csswg-test](https://github.com/w3c/csswg-test). Writing tests in a way\r\nthat allows them to be run in all browsers gives browser projects\r\nconfidence that they are shipping software that is compatible with other\r\nimplementations, and that later implementations will be compatible with\r\ntheir implementations. This in turn gives Web authors/developers\r\nconfidence that they can actually rely on the Web platform to deliver on\r\nthe promise of working across browsers and devices without needing extra\r\nlayers of abstraction to paper over the gaps left by specification\r\neditors and implementors.\r\n\r\nRunning the Tests\r\n=================\r\n\r\nThe tests are designed to be run from your local computer. The test\r\nenvironment requires Python 2.7+ (but not Python 3.x). You will also\r\nneed a copy of OpenSSL. Users on Windows should read the\r\n[Windows Notes](#windows-notes) section below.\r\n\r\nTo get the tests running, you need to set up the test domains in your\r\n[`hosts` file](http://en.wikipedia.org/wiki/Hosts_%28file%29%23Location_in_the_file_system). The\r\nfollowing entries are required:\r\n\r\n```\r\n127.0.0.1   web-platform.test\r\n127.0.0.1   www.web-platform.test\r\n127.0.0.1   www1.web-platform.test\r\n127.0.0.1   www2.web-platform.test\r\n127.0.0.1   xn--n8j6ds53lwwkrqhv28a.web-platform.test\r\n127.0.0.1   xn--lve-6lad.web-platform.test\r\n0.0.0.0     nonexistent-origin.web-platform.test\r\n```\r\n\r\nBecause web-platform-tests uses git submodules, you must ensure that\r\nthese are up to date. In the root of your checkout, run:\r\n\r\n```\r\ngit submodule update --init --recursive\r\n```\r\n\r\nThe test environment can then be started using\r\n\r\n    ./serve\r\n\r\nThis will start HTTP servers on two ports and a websockets server on\r\none port. By default one web server starts on port 8000 and the other\r\nports are randomly-chosen free ports. Tests must be loaded from the\r\n*first* HTTP server in the output. To change the ports, copy the\r\n`config.default.json` file to `config.json` and edit the new file,\r\nreplacing the part that reads:\r\n\r\n```\r\n\"http\": [8000, \"auto\"]\r\n```\r\n\r\nto some port of your choice e.g.\r\n\r\n```\r\n\"http\": [1234, \"auto\"]\r\n```\r\n\r\nIf you installed OpenSSL in such a way that running `openssl` at a\r\ncommand line doesn't work, you also need to adjust the path to the\r\nOpenSSL binary. This can be done by adding a section to `config.json`\r\nlike:\r\n\r\n```\r\n\"ssl\": {\"openssl\": {\"binary\": \"/path/to/openssl\"}}\r\n```\r\n\r\n<span id=\"windows-notes\">Windows Notes</span>\r\n=============================================\r\n\r\nRunning wptserve with SSL enabled on Windows typically requires\r\ninstalling an OpenSSL distribution.\r\n[Shining Light](https://slproweb.com/products/Win32OpenSSL.html)\r\nprovide a convenient installer that is known to work, but requires a\r\nlittle extra setup.\r\n\r\nAfter installation ensure that the path to OpenSSL is on your `%Path%`\r\nenvironment variable.\r\n\r\nThen set the path to the default OpenSSL configuration file (usually\r\nsomething like `C:\\OpenSSL-Win32\\bin\\openssl.cfg` in the server\r\nconfiguration. To do this copy `config.default.json` in the\r\nweb-platform-tests root to `config.json`. Then edit the JSON so that\r\nthe key `ssl/openssl/base_conf_path` has a value that is the path to\r\nthe OpenSSL config file.\r\n\r\n\r\nTest Runner\r\n===========\r\n\r\nThere is a test runner that is designed to provide a\r\nconvenient way to run the web-platform tests in-browser. It will run\r\ntestharness.js tests automatically but requires manual work for\r\nreftests and manual tests.\r\n\r\nThe runner can be found at `/tools/runner/index.html` on the local\r\nserver i.e.\r\n\r\n```\r\nhttp://web-platform.test:8000/tools/runner/index.html\r\n```\r\n\r\nin the default configuration. The first time you use this it has to\r\ngenerate a manifest of all tests. This may take some time, so please\r\nbe patient.\r\n\r\nPublication\r\n===========\r\n\r\nThe master branch is automatically synced to http://w3c-test.org/.\r\n\r\nPull requests that have been checked are automatically mirrored to\r\nhttp://w3c-test.org/submissions/.\r\n\r\nFinding Things\r\n==============\r\n\r\nEach top-level directory represents a W3C specification: the name\r\nmatches the shortname used after the canonical address of the said\r\nspecification under http://www.w3.org/TR/ .\r\n\r\nFor some of the specifications, the tree under the top-level directory\r\nrepresents the sections of the respective documents, using the section\r\nIDs for directory names, with a maximum of three levels deep.\r\n\r\nSo if you're looking for tests in HTML for \"The History interface\",\r\nthey will be under `html/browsers/history/the-history-interface/`.\r\n\r\nVarious resources that tests depend on are in `common`, `images`, and\r\n`fonts`.\r\n\r\nBranches\r\n========\r\n\r\nIn the vast majority of cases the **only** upstream branch that you\r\nshould need to care about is `master`. If you see other branches in\r\nthe repository, you can generally safely ignore them.\r\n\r\nContributing\r\n============\r\n\r\nSave the Web, Write Some Tests!\r\n\r\nAbsolutely everyone is welcome (and even encouraged) to contribute to\r\ntest development, so long as you fulfill the contribution requirements\r\ndetailed in the [Contributing Guidelines][contributing]. No test is\r\ntoo small or too simple, especially if it corresponds to something for\r\nwhich you've noted an interoperability bug in a browser.\r\n\r\nThe way to contribute is just as usual:\r\n\r\n* Fork this repository (and make sure you're still relatively in sync\r\n  with it if you forked a while ago).\r\n* Create a branch for your changes:\r\n  `git checkout -b topic`.\r\n* Make your changes.\r\n* Run the lint script described below.\r\n* Commit locally and push that to your repo.\r\n* Send in a pull request based on the above.\r\n\r\nLint tool\r\n---------\r\n\r\nWe have a lint tool for catching common mistakes in test files. You\r\ncan run it manually by starting the `lint` executable from the root of\r\nyour local web-platform-tests working directory like this:\r\n\r\n```\r\n./lint\r\n```\r\n\r\nThe lint tool is also run automatically for every submitted pull\r\nrequest, and reviewers will not merge branches with tests that have\r\nlint errors, so you must fix any errors the lint tool reports. For\r\ndetails on doing that, see the [lint-tool documentation][lint-tool].\r\n\r\nBut in the unusual case of error reports for things essential to a\r\ncertain test or that for other exceptional reasons shouldn't prevent\r\na merge of a test, update and commit the `lint.whitelist` file in the\r\nweb-platform-tests root directory to suppress the error reports. For\r\ndetails on doing that, see the [lint-tool documentation][lint-tool].\r\n\r\n[lint-tool]: https://github.com/w3c/web-platform-tests/blob/master/docs/lint-tool.md\r\n\r\nAdding command-line scripts (\"tools\" subdirs)\r\n---------------------------------------------\r\n\r\nSometimes you may want to add a script to the repository that's meant\r\nto be used from the command line, not from a browser (e.g., a script\r\nfor generating test files). If you want to ensure (e.g., for security\r\nreasons) that such scripts won't be handled by the HTTP server, but\r\nwill instead only be usable from the command line, then place them in\r\neither:\r\n\r\n* the `tools` subdir at the root of the repository, or\r\n\r\n* the `tools` subdir at the root of any top-level directory in the\r\n  repository which contains the tests the script is meant to be used\r\n  with\r\n\r\nAny files in those `tools` directories won't be handled by the HTTP\r\nserver; instead the server will return a 404 if a user navigates to\r\nthe URL for a file within them.\r\n\r\nIf you want to add a script for use with a particular set of tests but\r\nthere isn't yet any `tools` subdir at the root of a top-level\r\ndirectory in the repository containing those tests, you can create a\r\n`tools` subdir at the root of that top-level directory and place your\r\nscripts there.\r\n\r\nFor example, if you wanted to add a script for use with tests in the\r\n`notifications` directory, create the `notifications/tools` subdir and\r\nput your script there.\r\n\r\nTest Review\r\n===========\r\n\r\nWe can sometimes take a little while to go through pull requests\r\nbecause we have to go through all the tests and ensure that they match\r\nthe specification correctly. But we look at all of them, and take\r\neverything that we can.\r\n\r\nGetting Involved\r\n================\r\n\r\nIf you wish to contribute actively, you're very welcome to join the\r\npublic-test-infra@w3.org mailing list (low traffic) by\r\n[signing up to our mailing list](mailto:public-test-infra-request@w3.org?subject=subscribe).\r\nThe mailing list is [archived][mailarchive].\r\n\r\nJoin us on irc #testing ([irc.w3.org][ircw3org], port 6665). The channel\r\nis [archived][ircarchive].\r\n\r\n[contributing]: https://github.com/w3c/web-platform-tests/blob/master/CONTRIBUTING.md\r\n[ircw3org]: https://www.w3.org/wiki/IRC\r\n[ircarchive]: http://krijnhoetmer.nl/irc-logs/testing/\r\n[mailarchive]: http://lists.w3.org/Archives/Public/public-test-infra/\r\n\r\nDocumentation\r\n=============\r\n\r\n* [How to write and review tests](http://testthewebforward.org/docs/)\r\n* [Documentation for the wptserve server](http://wptserve.readthedocs.org/en/latest/)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}